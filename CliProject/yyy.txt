// Author: mjh
// Source: C:\Users\owner\Desktop\CliProject\CliProject\.txt
// --- Start of .txt ---
// --- Start of fil.cs ---
using System;

class Avrum
{
    static void Main(string[] args)
    {
        Console.WriteLine("���� ����");
    }
}
// --- End of fil.cs ---

// --- Start of Program.cs ---
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks; // הוספת שימוש ב-Task
var bundleCommand = new Command("bundle", "Bundle code files into a single file")
{
    new Option<string>("--language", "Comma-separated list of programming languages (or 'all')") { IsRequired = true },
    new Option<string>("--output","optional command of the zip file's name"),
    new Option<bool>("--note", "Include a note with the source code paths in the bundle"),
    new Option<string>("--sort", "Sort files by 'name' or 'extension'. Default is 'name'.") 
};
bundleCommand.SetHandler(async (InvocationContext context) =>
{
    // שלוף את הערך של --language בצורה נכונה
var language = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "language")) ?? string.Empty;
var fileName = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "output")) ?? "bundle.zip";
var note = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "note")) ?? string.Empty;
var sort = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "sort")) ?? string.Empty;
    Console.WriteLine(language + " language");
    Console.WriteLine(fileName + " filename");
    if (string.IsNullOrEmpty(language.ToString()))
    {
        Console.WriteLine("The --language option is required.");
        return;
    }
    // אם המשתמש בחר 'all', כל קבצי הקוד ייכללו
    if (language.ToString().ToLower() == "all")
    {
        Console.WriteLine("Bundling all code files...");
        var allFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.*", SearchOption.TopDirectoryOnly);
        await CreateBundle(allFiles,fileName.ToString()); // הוספת await פה כדי להמתין לסיום
    }
    else
    {
        // אחרת, בחר קבצים לפי השפות שנבחרו
        var languages = language.ToString().Split(',').Select(l => l.Trim().ToLower()).ToArray();
        var languageExtensions = GetExtensionsForLanguages(languages);
        var selectedFiles = languageExtensions.SelectMany(ext => Directory.GetFiles(Directory.GetCurrentDirectory(), $"*.{ext}")).ToArray();
        await CreateBundle(selectedFiles,fileName.ToString()); // הוספת await פה כדי להמתין לסיום
    }
});
var rootCommand = new RootCommand();
rootCommand.AddCommand(bundleCommand);
await rootCommand.InvokeAsync(args); // הוספת await פה כדי להמתין לסיום
// פונקציה שמקבלת קבצים ומבצעת את האריזה
async Task CreateBundle(string[] files, string fileName)
{
    // הגדר שם ברירת מחדל אם לא סופק שם קובץ
    var bundleFile = string.IsNullOrEmpty(fileName) ? "bundle.txt" : fileName;
    if (!(bundleFile.EndsWith(".txt"))) bundleFile = bundleFile +".txt";
    // פתח קובץ כתיבה אסינכרוני
    using (var writer = new StreamWriter(bundleFile, false))
    {
        foreach (var file in files)
        {
            writer.WriteLine($"// --- Start of {Path.GetFileName(file)} ---");
            var content = await File.ReadAllTextAsync(file);
            await writer.WriteLineAsync(content);
            writer.WriteLine($"// --- End of {Path.GetFileName(file)} ---\n");
        }
    }
    Console.WriteLine($"Files bundled into {bundleFile}");
}
// פונקציה שמחזירה את סיומות הקבצים המתאימים לשפות שנבחרו
string[] GetExtensionsForLanguages(string[] languages)
{
    var languageExtensions = new System.Collections.Generic.Dictionary<string, string[]>
    {
        { "csharp", new[] { "cs" } },
        { "javascript", new[] { "js" } },
        { "python", new[] { "py" } },
        { "java", new[] { "java" } }
        // אפשר להוסיף שפות נוספות לפי הצורך
    };
    return languages.SelectMany(lang => languageExtensions.ContainsKey(lang) ? languageExtensions[lang] : new string[0]).ToArray();
}
// --- End of Program.cs ---

// --- End of .txt ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\aa.py
// --- Start of aa.py ---
using System;

class Avrum
{
    static void Main(string[] args)
    {
        Console.WriteLine("���� ����");
    }
}
// --- End of aa.py ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\bundle.rsp
// --- Start of bundle.rsp ---
--language "all"
--output "yyy"
--note true
--remove-empty-lines true
--author "mjh"
// --- End of bundle.rsp ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\CliProject.csproj
// --- Start of CliProject.csproj ---
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net7.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta4.22272.1" />
  </ItemGroup>
</Project>
// --- End of CliProject.csproj ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\dotnet
// --- Start of dotnet ---

// --- End of dotnet ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\jjj.txt
// --- Start of jjj.txt ---
// Author: Mic
// Source: C:\Users\owner\Desktop\CliProject\CliProject\aa.py
// --- Start of aa.py ---
using System;

class Avrum
{
    static void Main(string[] args)
    {
        Console.WriteLine("���� ����");
    }
}
// --- End of aa.py ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\Program.cs
// --- Start of Program.cs ---
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Threading.Tasks; // הוספת שימוש ב-Task
var bundleCommand = new Command("bundle", "Bundle code files into a single file")
{
    new Option<string>("--language", "Comma-separated list of programming languages (or 'all')") { IsRequired = true },
    new Option<string>("--output", "Optional name of the output file"),
    new Option<bool>("--note", "Include a note with the source code paths in the bundle"),
    new Option<bool>("--remove-empty-lines", "removing empty lines"),
    new Option<string>("--sort", "Sort files by 'name' or 'extension'. Default is 'name'.") { IsRequired = false },
    new Option<string>("--author", "writing on top of the bundle file the name of the file author.") { IsRequired = false }
};
bundleCommand.SetHandler(async (InvocationContext context) =>
{
    var language = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "language")) as string ?? string.Empty;
    var fileName = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "output")) ?? "bundle.txt";
    var author = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "author")) ?? "";
    var includeNote = context.ParseResult.GetValueForOption<bool>((Option<bool>)bundleCommand.Options.First(o => o.Name == "note"));
    var removeEmptyLines = context.ParseResult.GetValueForOption<bool>((Option<bool>)bundleCommand.Options.First(o => o.Name == "remove-empty-lines"));
    var sort = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "sort")) as string;
    if (string.IsNullOrEmpty(sort))
    {
        sort = "name";
    }
    if (string.IsNullOrEmpty(language))
    {
        Console.WriteLine("The --language option is required.");
        return;
    }
    string[] selectedFiles;
    if (language.ToLower() == "all")
    {
        selectedFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.*", SearchOption.TopDirectoryOnly);
    }
    else
    {
        var languages = language.Split(',').Select(l => l.Trim().ToLower()).ToArray();
        var languageExtensions = GetExtensionsForLanguages(languages);
        selectedFiles = languageExtensions.SelectMany(ext => Directory.GetFiles(Directory.GetCurrentDirectory(), $"*.{ext}")).ToArray();
    }
    await CreateBundle(selectedFiles, fileName.ToString(),includeNote, sort.ToString(), removeEmptyLines, author.ToString());
});
var rootCommand = new RootCommand();
rootCommand.AddCommand(bundleCommand);
await rootCommand.InvokeAsync(args);
// פונקציה שמאחדת את כל הקבצים לתוך קובץ אחד
async Task CreateBundle(string[] files, string fileName, bool includeNote, string sort, bool removeEmptyLines, string author)  // הוספת sort לפונקציה
{
    var bundleFile = string.IsNullOrEmpty(fileName) ? "bundle.txt" : fileName;
    if (!bundleFile.EndsWith(".txt")) bundleFile += ".txt";
    if (sort.ToLower() == "extension")
    {
        files = files.OrderBy(f => Path.GetExtension(f)).ToArray();  // מיין לפי סיומת הקובץ
    }
    else
    {
        files = files.OrderBy(f => Path.GetFileName(f)).ToArray();  // מיין לפי שם הקובץ
    }
    using (var writer = new StreamWriter(bundleFile, false))
    {
        if (!string.IsNullOrEmpty(author))
        {
            writer.WriteLine($"// Author: {author}"); // הוספת שם היוצר ככותרת
        }
        foreach (var file in files)
        {
            if (includeNote)
            {
                writer.WriteLine($"// Source: {Path.GetFullPath(file)}"); // הוספת ניתוב מלא
            }
            writer.WriteLine($"// --- Start of {Path.GetFileName(file)} ---");
            var content = await File.ReadAllTextAsync(file);
            if (removeEmptyLines) content = RemoveEmptyLines(content);
            await writer.WriteLineAsync(content);
            writer.WriteLine($"// --- End of {Path.GetFileName(file)} ---\n");
        }
    }
    Console.WriteLine($"Files bundled into {bundleFile}");
}
string RemoveEmptyLines(string content)
{
    return string.Join(Environment.NewLine, content
        .Split(new[] { Environment.NewLine }, StringSplitOptions.None)
        .Where(line => !string.IsNullOrWhiteSpace(line)));  // מסנן שורות ריקות
}
// פונקציה שמחזירה את סיומות הקבצים המתאימים לשפות שנבחרו
string[] GetExtensionsForLanguages(string[] languages)
{
    var languageExtensions = new System.Collections.Generic.Dictionary<string, string[]>
    {
        { "csharp", new[] { "cs" } },
        { "javascript", new[] { "js" } },
        { "python", new[] { "py" } },
        { "java", new[] { "java" } }
        // ניתן להוסיף שפות נוספות לפי הצורך
    };
    return languages.SelectMany(lang => languageExtensions.ContainsKey(lang) ? languageExtensions[lang] : new string[0]).ToArray();
}
// --- End of Program.cs ---

// --- End of jjj.txt ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\Program.cs
// --- Start of Program.cs ---
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
var createRspCommand = new Command("create-rsp", "Create a response file for the bundle command");
createRspCommand.SetHandler(async () =>
{
    // קלט מהמשתמש עבור כל אפשרות
    Console.WriteLine("Enter languages (comma-separated or 'all'):");
    var language = Console.ReadLine()?.Trim();
    if (language == "") language = "csharp";
    Console.WriteLine("Enter output file name (optional, default 'bundle.txt'):");
    var output = Console.ReadLine()?.Trim();
    Console.WriteLine("Include note with source code paths? (true/false):");
    var note = Console.ReadLine()?.Trim();
    Console.WriteLine("Remove empty lines? (true/false):");
    var removeEmptyLines = Console.ReadLine()?.Trim();
    Console.WriteLine("Enter author name (optional):");
    var author = Console.ReadLine()?.Trim();
    // בניית הפקודה המלאה
    var rspContent = $"--language \"{language}\"\n";
    if (!string.IsNullOrEmpty(output)) rspContent += $"--output \"{output}\"\n";
    if (!string.IsNullOrEmpty(note)) rspContent += $"--note {note}\n";
    if (!string.IsNullOrEmpty(removeEmptyLines)) rspContent += $"--remove-empty-lines {removeEmptyLines}\n";
    if (!string.IsNullOrEmpty(author)) rspContent += $"--author \"{author}\"";
    // כתיבת הפקודה לקובץ .rsp
    var rspFileName = "bundle.rsp";
    await File.WriteAllTextAsync(rspFileName, rspContent);
    Console.WriteLine($"Response file '{rspFileName}' created successfully!");
});
var bundleCommand = new Command("bundle", "Bundle code files into a single file")
{
    new Option<string>("--language", "Comma-separated list of programming languages (or 'all')") { IsRequired = false },
    new Option<string>("--output", "Optional name of the output file"),
    new Option<bool>("--note", "Include a note with the source code paths in the bundle"),
    new Option<bool>("--remove-empty-lines", "Remove empty lines from files"),
    new Option<string>("--sort", "Sort files by 'name' or 'extension'") { IsRequired = false },
    new Option<string>("--author", "Author name to include at the top of the bundle file") { IsRequired = false }
};
bundleCommand.SetHandler(async (InvocationContext context) =>
{
    var language = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "language")) ?? "csharp";
    var fileName = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "output")) ?? "bundle.txt";
    var author = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "author")) ?? "";
    var includeNote = context.ParseResult.GetValueForOption<bool>((Option<bool>)bundleCommand.Options.First(o => o.Name == "note"));
    var removeEmptyLines = context.ParseResult.GetValueForOption<bool>((Option<bool>)bundleCommand.Options.First(o => o.Name == "remove-empty-lines"));
    var sort = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "sort")) ?? "name";
    if (string.IsNullOrEmpty(language.ToString()))
    {
        Console.WriteLine("The --language option is required.");
        return;
    }
    // בחירת קבצים
    string[] selectedFiles;
    if (language.ToString().ToLower() == "all")
    {
        selectedFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.*", SearchOption.TopDirectoryOnly);
    }
    else
    {
        var languages = language.ToString().Split(',').Select(l => l.Trim().ToLower()).ToArray();
        var languageExtensions = GetExtensionsForLanguages(languages);
        selectedFiles = languageExtensions.SelectMany(ext => Directory.GetFiles(Directory.GetCurrentDirectory(), $"*.{ext}")).ToArray();
    }
    await CreateBundle(selectedFiles, fileName.ToString(), includeNote, sort.ToString(), removeEmptyLines, author.ToString());
});
var rootCommand = new RootCommand();
rootCommand.AddCommand(bundleCommand);
rootCommand.AddCommand(createRspCommand);
await rootCommand.InvokeAsync(args);
// פונקציה לאיחוד קבצים
async Task CreateBundle(string[] files, string fileName, bool includeNote, string sort, bool removeEmptyLines, string author)
{
    var bundleFile = fileName.EndsWith(".txt") ? fileName : fileName + ".txt";
    files = sort.ToLower() == "extension"
        ? files.OrderBy(f => Path.GetExtension(f)).ToArray()
        : files.OrderBy(f => Path.GetFileName(f)).ToArray();
    using (var writer = new StreamWriter(bundleFile, false))
    {
        if (!string.IsNullOrEmpty(author))
        {
            writer.WriteLine($"// Author: {author}");
        }
        foreach (var file in files)
        {
            if (includeNote)
            {
                writer.WriteLine($"// Source: {Path.GetFullPath(file)}");
            }
            writer.WriteLine($"// --- Start of {Path.GetFileName(file)} ---");
            var content = await File.ReadAllTextAsync(file);
            if (removeEmptyLines) content = RemoveEmptyLines(content);
            await writer.WriteLineAsync(content);
            writer.WriteLine($"// --- End of {Path.GetFileName(file)} ---\n");
        }
    }
    Console.WriteLine($"Files bundled into {bundleFile}");
}
// פונקציה שמחזירה את סיומות הקבצים המתאימים לשפות שנבחרו
string[] GetExtensionsForLanguages(string[] languages)
{
    var languageExtensions = new System.Collections.Generic.Dictionary<string, string[]>
    {
        { "csharp", new[] { "cs" } },
        { "javascript", new[] { "js" } },
        { "python", new[] { "py" } },
        { "java", new[] { "java" } }
    };
    return languages.SelectMany(lang => languageExtensions.ContainsKey(lang) ? languageExtensions[lang] : new string[0]).ToArray();
}
// פונקציה להסרת שורות ריקות
string RemoveEmptyLines(string content)
{
    return string.Join(Environment.NewLine, content.Split(Environment.NewLine).Where(line => !string.IsNullOrWhiteSpace(line)));
}
// --- End of Program.cs ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\tttt.txt
// --- Start of tttt.txt ---
// Author: mmm
// Source: C:\Users\owner\Desktop\CliProject\CliProject\.txt
// --- Start of .txt ---
// --- Start of fil.cs ---
using System;

class Avrum
{
    static void Main(string[] args)
    {
        Console.WriteLine("���� ����");
    }
}
// --- End of fil.cs ---

// --- Start of Program.cs ---
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks; // הוספת שימוש ב-Task
var bundleCommand = new Command("bundle", "Bundle code files into a single file")
{
    new Option<string>("--language", "Comma-separated list of programming languages (or 'all')") { IsRequired = true },
    new Option<string>("--output","optional command of the zip file's name"),
    new Option<bool>("--note", "Include a note with the source code paths in the bundle"),
    new Option<string>("--sort", "Sort files by 'name' or 'extension'. Default is 'name'.") 
};
bundleCommand.SetHandler(async (InvocationContext context) =>
{
    // שלוף את הערך של --language בצורה נכונה
var language = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "language")) ?? string.Empty;
var fileName = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "output")) ?? "bundle.zip";
var note = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "note")) ?? string.Empty;
var sort = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "sort")) ?? string.Empty;
    Console.WriteLine(language + " language");
    Console.WriteLine(fileName + " filename");
    if (string.IsNullOrEmpty(language.ToString()))
    {
        Console.WriteLine("The --language option is required.");
        return;
    }
    // אם המשתמש בחר 'all', כל קבצי הקוד ייכללו
    if (language.ToString().ToLower() == "all")
    {
        Console.WriteLine("Bundling all code files...");
        var allFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.*", SearchOption.TopDirectoryOnly);
        await CreateBundle(allFiles,fileName.ToString()); // הוספת await פה כדי להמתין לסיום
    }
    else
    {
        // אחרת, בחר קבצים לפי השפות שנבחרו
        var languages = language.ToString().Split(',').Select(l => l.Trim().ToLower()).ToArray();
        var languageExtensions = GetExtensionsForLanguages(languages);
        var selectedFiles = languageExtensions.SelectMany(ext => Directory.GetFiles(Directory.GetCurrentDirectory(), $"*.{ext}")).ToArray();
        await CreateBundle(selectedFiles,fileName.ToString()); // הוספת await פה כדי להמתין לסיום
    }
});
var rootCommand = new RootCommand();
rootCommand.AddCommand(bundleCommand);
await rootCommand.InvokeAsync(args); // הוספת await פה כדי להמתין לסיום
// פונקציה שמקבלת קבצים ומבצעת את האריזה
async Task CreateBundle(string[] files, string fileName)
{
    // הגדר שם ברירת מחדל אם לא סופק שם קובץ
    var bundleFile = string.IsNullOrEmpty(fileName) ? "bundle.txt" : fileName;
    if (!(bundleFile.EndsWith(".txt"))) bundleFile = bundleFile +".txt";
    // פתח קובץ כתיבה אסינכרוני
    using (var writer = new StreamWriter(bundleFile, false))
    {
        foreach (var file in files)
        {
            writer.WriteLine($"// --- Start of {Path.GetFileName(file)} ---");
            var content = await File.ReadAllTextAsync(file);
            await writer.WriteLineAsync(content);
            writer.WriteLine($"// --- End of {Path.GetFileName(file)} ---\n");
        }
    }
    Console.WriteLine($"Files bundled into {bundleFile}");
}
// פונקציה שמחזירה את סיומות הקבצים המתאימים לשפות שנבחרו
string[] GetExtensionsForLanguages(string[] languages)
{
    var languageExtensions = new System.Collections.Generic.Dictionary<string, string[]>
    {
        { "csharp", new[] { "cs" } },
        { "javascript", new[] { "js" } },
        { "python", new[] { "py" } },
        { "java", new[] { "java" } }
        // אפשר להוסיף שפות נוספות לפי הצורך
    };
    return languages.SelectMany(lang => languageExtensions.ContainsKey(lang) ? languageExtensions[lang] : new string[0]).ToArray();
}
// --- End of Program.cs ---

// --- End of .txt ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\aa.py
// --- Start of aa.py ---
using System;

class Avrum
{
    static void Main(string[] args)
    {
        Console.WriteLine("���� ����");
    }
}
// --- End of aa.py ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\bundle.rsp
// --- Start of bundle.rsp ---
--language "all"
--output "tttt"
--note true
--remove-empty-lines true
--author "mmm"

// --- End of bundle.rsp ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\CliProject.csproj
// --- Start of CliProject.csproj ---
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net7.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta4.22272.1" />
  </ItemGroup>
</Project>
// --- End of CliProject.csproj ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\dotnet
// --- Start of dotnet ---
// --- End of dotnet ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\jjj.txt
// --- Start of jjj.txt ---
// Author: Mic
// Source: C:\Users\owner\Desktop\CliProject\CliProject\aa.py
// --- Start of aa.py ---
using System;

class Avrum
{
    static void Main(string[] args)
    {
        Console.WriteLine("���� ����");
    }
}
// --- End of aa.py ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\Program.cs
// --- Start of Program.cs ---
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Threading.Tasks; // הוספת שימוש ב-Task
var bundleCommand = new Command("bundle", "Bundle code files into a single file")
{
    new Option<string>("--language", "Comma-separated list of programming languages (or 'all')") { IsRequired = true },
    new Option<string>("--output", "Optional name of the output file"),
    new Option<bool>("--note", "Include a note with the source code paths in the bundle"),
    new Option<bool>("--remove-empty-lines", "removing empty lines"),
    new Option<string>("--sort", "Sort files by 'name' or 'extension'. Default is 'name'.") { IsRequired = false },
    new Option<string>("--author", "writing on top of the bundle file the name of the file author.") { IsRequired = false }
};
bundleCommand.SetHandler(async (InvocationContext context) =>
{
    var language = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "language")) as string ?? string.Empty;
    var fileName = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "output")) ?? "bundle.txt";
    var author = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "author")) ?? "";
    var includeNote = context.ParseResult.GetValueForOption<bool>((Option<bool>)bundleCommand.Options.First(o => o.Name == "note"));
    var removeEmptyLines = context.ParseResult.GetValueForOption<bool>((Option<bool>)bundleCommand.Options.First(o => o.Name == "remove-empty-lines"));
    var sort = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "sort")) as string;
    if (string.IsNullOrEmpty(sort))
    {
        sort = "name";
    }
    if (string.IsNullOrEmpty(language))
    {
        Console.WriteLine("The --language option is required.");
        return;
    }
    string[] selectedFiles;
    if (language.ToLower() == "all")
    {
        selectedFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.*", SearchOption.TopDirectoryOnly);
    }
    else
    {
        var languages = language.Split(',').Select(l => l.Trim().ToLower()).ToArray();
        var languageExtensions = GetExtensionsForLanguages(languages);
        selectedFiles = languageExtensions.SelectMany(ext => Directory.GetFiles(Directory.GetCurrentDirectory(), $"*.{ext}")).ToArray();
    }
    await CreateBundle(selectedFiles, fileName.ToString(),includeNote, sort.ToString(), removeEmptyLines, author.ToString());
});
var rootCommand = new RootCommand();
rootCommand.AddCommand(bundleCommand);
await rootCommand.InvokeAsync(args);
// פונקציה שמאחדת את כל הקבצים לתוך קובץ אחד
async Task CreateBundle(string[] files, string fileName, bool includeNote, string sort, bool removeEmptyLines, string author)  // הוספת sort לפונקציה
{
    var bundleFile = string.IsNullOrEmpty(fileName) ? "bundle.txt" : fileName;
    if (!bundleFile.EndsWith(".txt")) bundleFile += ".txt";
    if (sort.ToLower() == "extension")
    {
        files = files.OrderBy(f => Path.GetExtension(f)).ToArray();  // מיין לפי סיומת הקובץ
    }
    else
    {
        files = files.OrderBy(f => Path.GetFileName(f)).ToArray();  // מיין לפי שם הקובץ
    }
    using (var writer = new StreamWriter(bundleFile, false))
    {
        if (!string.IsNullOrEmpty(author))
        {
            writer.WriteLine($"// Author: {author}"); // הוספת שם היוצר ככותרת
        }
        foreach (var file in files)
        {
            if (includeNote)
            {
                writer.WriteLine($"// Source: {Path.GetFullPath(file)}"); // הוספת ניתוב מלא
            }
            writer.WriteLine($"// --- Start of {Path.GetFileName(file)} ---");
            var content = await File.ReadAllTextAsync(file);
            if (removeEmptyLines) content = RemoveEmptyLines(content);
            await writer.WriteLineAsync(content);
            writer.WriteLine($"// --- End of {Path.GetFileName(file)} ---\n");
        }
    }
    Console.WriteLine($"Files bundled into {bundleFile}");
}
string RemoveEmptyLines(string content)
{
    return string.Join(Environment.NewLine, content
        .Split(new[] { Environment.NewLine }, StringSplitOptions.None)
        .Where(line => !string.IsNullOrWhiteSpace(line)));  // מסנן שורות ריקות
}
// פונקציה שמחזירה את סיומות הקבצים המתאימים לשפות שנבחרו
string[] GetExtensionsForLanguages(string[] languages)
{
    var languageExtensions = new System.Collections.Generic.Dictionary<string, string[]>
    {
        { "csharp", new[] { "cs" } },
        { "javascript", new[] { "js" } },
        { "python", new[] { "py" } },
        { "java", new[] { "java" } }
        // ניתן להוסיף שפות נוספות לפי הצורך
    };
    return languages.SelectMany(lang => languageExtensions.ContainsKey(lang) ? languageExtensions[lang] : new string[0]).ToArray();
}
// --- End of Program.cs ---

// --- End of jjj.txt ---

// Source: C:\Users\owner\Desktop\CliProject\CliProject\Program.cs
// --- Start of Program.cs ---
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
var createRspCommand = new Command("create-rsp", "Create a response file for the bundle command");
createRspCommand.SetHandler(async () =>
{
    // קלט מהמשתמש עבור כל אפשרות
    Console.WriteLine("Enter languages (comma-separated or 'all'):");
    var language = Console.ReadLine()?.Trim();
    if (language == "") language = "csharp";
    Console.WriteLine("Enter output file name (optional, default 'bundle.txt'):");
    var output = Console.ReadLine()?.Trim();
    Console.WriteLine("Include note with source code paths? (true/false):");
    var note = Console.ReadLine()?.Trim();
    Console.WriteLine("Remove empty lines? (true/false):");
    var removeEmptyLines = Console.ReadLine()?.Trim();
    Console.WriteLine("Enter author name (optional):");
    var author = Console.ReadLine()?.Trim();
    // בניית הפקודה המלאה
    var rspContent = $"--language {language}\n";
    if (!string.IsNullOrEmpty(output)) rspContent += $"--output {output}\n";
    if (!string.IsNullOrEmpty(note)) rspContent += $"--note {note}\n";
    if (!string.IsNullOrEmpty(removeEmptyLines)) rspContent += $"--remove-empty-lines {removeEmptyLines}\n";
    if (!string.IsNullOrEmpty(author)) rspContent += $"--author {author}";
    // כתיבת הפקודה לקובץ .rsp
    var rspFileName = "bundle.rsp";
    await File.WriteAllTextAsync(rspFileName, rspContent);
    Console.WriteLine($"Response file '{rspFileName}' created successfully!");
});
var bundleCommand = new Command("bundle", "Bundle code files into a single file")
{
    new Option<string>("--language", "Comma-separated list of programming languages (or 'all')") { IsRequired = false },
    new Option<string>("--output", "Optional name of the output file"),
    new Option<bool>("--note", "Include a note with the source code paths in the bundle"),
    new Option<bool>("--remove-empty-lines", "Remove empty lines from files"),
    new Option<string>("--sort", "Sort files by 'name' or 'extension'") { IsRequired = false },
    new Option<string>("--author", "Author name to include at the top of the bundle file") { IsRequired = false }
};
bundleCommand.SetHandler(async (InvocationContext context) =>
{
    var language = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "language")) ?? "csharp";
    var fileName = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "output")) ?? "bundle.txt";
    var author = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "author")) ?? "";
    var includeNote = context.ParseResult.GetValueForOption<bool>((Option<bool>)bundleCommand.Options.First(o => o.Name == "note"));
    var removeEmptyLines = context.ParseResult.GetValueForOption<bool>((Option<bool>)bundleCommand.Options.First(o => o.Name == "remove-empty-lines"));
    var sort = context.ParseResult.GetValueForOption(bundleCommand.Options.First(o => o.Name == "sort")) ?? "name";
    if (string.IsNullOrEmpty(language.ToString()))
    {
        Console.WriteLine("The --language option is required.");
        return;
    }
    // בחירת קבצים
    string[] selectedFiles;
    if (language.ToString().ToLower() == "all")
    {
        selectedFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.*", SearchOption.TopDirectoryOnly);
    }
    else
    {
        var languages = language.ToString().Split(',').Select(l => l.Trim().ToLower()).ToArray();
        var languageExtensions = GetExtensionsForLanguages(languages);
        selectedFiles = languageExtensions.SelectMany(ext => Directory.GetFiles(Directory.GetCurrentDirectory(), $"*.{ext}")).ToArray();
    }
    await CreateBundle(selectedFiles, fileName.ToString(), includeNote, sort.ToString(), removeEmptyLines, author.ToString());
});
var rootCommand = new RootCommand();
rootCommand.AddCommand(bundleCommand);
rootCommand.AddCommand(createRspCommand);
await rootCommand.InvokeAsync(args);
// פונקציה לאיחוד קבצים
async Task CreateBundle(string[] files, string fileName, bool includeNote, string sort, bool removeEmptyLines, string author)
{
    var bundleFile = fileName.EndsWith(".txt") ? fileName : fileName + ".txt";
    files = sort.ToLower() == "extension"
        ? files.OrderBy(f => Path.GetExtension(f)).ToArray()
        : files.OrderBy(f => Path.GetFileName(f)).ToArray();
    using (var writer = new StreamWriter(bundleFile, false))
    {
        if (!string.IsNullOrEmpty(author))
        {
            writer.WriteLine($"// Author: {author}");
        }
        foreach (var file in files)
        {
            if (includeNote)
            {
                writer.WriteLine($"// Source: {Path.GetFullPath(file)}");
            }
            writer.WriteLine($"// --- Start of {Path.GetFileName(file)} ---");
            var content = await File.ReadAllTextAsync(file);
            if (removeEmptyLines) content = RemoveEmptyLines(content);
            await writer.WriteLineAsync(content);
            writer.WriteLine($"// --- End of {Path.GetFileName(file)} ---\n");
        }
    }
    Console.WriteLine($"Files bundled into {bundleFile}");
}
// פונקציה שמחזירה את סיומות הקבצים המתאימים לשפות שנבחרו
string[] GetExtensionsForLanguages(string[] languages)
{
    var languageExtensions = new System.Collections.Generic.Dictionary<string, string[]>
    {
        { "csharp", new[] { "cs" } },
        { "javascript", new[] { "js" } },
        { "python", new[] { "py" } },
        { "java", new[] { "java" } }
    };
    return languages.SelectMany(lang => languageExtensions.ContainsKey(lang) ? languageExtensions[lang] : new string[0]).ToArray();
}
// פונקציה להסרת שורות ריקות
string RemoveEmptyLines(string content)
{
    return string.Join(Environment.NewLine, content.Split(Environment.NewLine).Where(line => !string.IsNullOrWhiteSpace(line)));
}
// --- End of Program.cs ---

// --- End of tttt.txt ---

